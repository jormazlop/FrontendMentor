[
    {
        "id": 1,
        "title": "Balancing Hobbies and Coding: How Hiking and Rock Climbing Help Me Stay Motivated",
        "slug": "balancing-hobbies-and-coding",
        "publishedAt": "2025-02-18T00:00:00Z",
        "description": "Thoughts on maintaining energy and focus through outdoor activities and exercise.",
        "content": "Today I want to talk about how I juggle my love for hiking and rock climbing with my growing passion for coding. It's easy to get so deep into front-end development that we forget to step away from our screens. But for me, embracing outdoor adventures has been crucial in keeping my mind fresh and my motivation strong.<br/><br/>---<br/><br/><h3 class='text-3'> Why Balance Matters</h3><br/>It's tempting to pour all your energy into coding—especially when you're in a good flow or *this close* to fixing that stubborn bug. However, <strong>taking breaks</strong> and staying active can help you:<br/><br/>1. <strong>Clear Your Head</strong>: Stepping away from lines of code often leads to creative problem-solving breakthroughs.<br/>2. <strong>Maintain Physical Health</strong>: Coding can be pretty sedentary, so regular exercise helps offset hours at the computer.<br/>3. <strong>Boost Mental Resilience</strong>: Outdoor hobbies let you recharge, fight stress, and come back stronger for the next coding challenge.<br/><br/>---<br/><br/>> <strong>Warning: Be aware of burnout</strong>  <br/>> Overworking at your desk—even if you love what you're doing—can lead to burnout. If you're feeling overwhelmed or fatigued, consider stepping away for a quick walk or a stretching session. Your code (and your body) will thank you!<br/><br/>---<br/><br/><h3 class='text-3'> My Outdoor Adventures</h3><br/><br/><h4 class='text-4'> 1. Hiking</h4><br/>I've always loved the feeling of conquering a trail and reaching a scenic overlook. Hiking challenges my endurance and keeps me grounded in nature's beauty. Whether it's a short trail on a lazy afternoon or a full-day trek in the mountains, the fresh air and picturesque views give me the clarity I need when I'm stuck on a tricky coding problem.<br/><br/>> <strong>Tip: Bring a small notebook on your hikes</strong>  <br/>Sometimes, those “aha” moments pop up when you're miles away from your keyboard!<br/><br/><h4 class='text-4'> 2. Rock Climbing</h4><br/>Rock climbing might seem worlds away from coding, but it actually mirrors the problem-solving aspects of development:<br/><br/>- <strong>Strategic Thinking</strong>: Each route is like a puzzle, and you have to figure out the sequence of moves.<br/>- <strong>Incremental Progress</strong>: You improve over time, one hold at a time, just like learning new coding concepts.<br/><br/>Rock climbing also helps build confidence—if I can overcome a tough route on the wall, I can handle whatever JavaScript throws at me.<br/><br/>---<br/><br/><h3 class='text-3'> Tips for Staying Motivated</h3><br/><br/>1. <strong>Plan Your Adventure</strong>: Before a big project, schedule a hike or climbing session. It gives you a goal to work toward and a well-deserved break afterward.<br/>2. <strong>Start Small</strong>: If you're new to outdoor activities, you don't have to summit the highest peak. A simple walk in the park can do wonders for your mood.<br/>3. <strong>Listen to Your Body</strong>: If you're tired, don't force yourself to climb a 5.12 route! Find a balance between pushing your limits and staying safe.<br/>4. <strong>Track Your Progress</strong>: Just like version control, keep track of your achievements in both coding and hobbies. Looking back at how far you've come is super motivating.<br/><br/>---<br/><br/><h3 class='text-3'> Final Thoughts</h3><br/>Balancing coding with activities like hiking and rock climbing has been a game-changer for me. By stepping away from the computer, I find renewed focus, more creativity, and a stronger sense of well-being. Whether you're a seasoned developer or just starting out, remember: taking care of your mind and body is just as important as mastering that new JavaScript framework.<br/><br/>Thanks for reading!<br/><br/>— Paulina"
    },
    {
        "id": 2,
        "title": "Reading for Inspiration: 5 Books That Shaped My Coding Journey",
        "slug": "5-books-that-shaped-my-coding-journey",
        "publishedAt": "2025-02-15T00:00:00Z",
        "description": "A few of my favorite books, both fiction and non-fiction, that keep me motivated.",
        "content": "As much as I love sitting down with a code editor, sometimes I need a break from staring at screens. That's where books come in. Over the past few years, I've found that reading the right books—whether they're about coding, creativity, or even fantasy—has given me new perspectives and fresh motivation. Below are five titles that have really *shaped my journey* so far.<br/><br/>---<br/><br/><h3 class='text-3'> 1. *The Pragmatic Programmer* by Andrew Hunt and David Thomas</h3><br/>I'll admit, it took me a while to pick this one up. Once I did, I realized why so many developers recommend it. It's packed with practical advice on how to write clean, maintainable code and think critically about the process of software development.  <br/><strong>Why I Love It</strong>: It's not just about coding—it's about cultivating a curious, problem-solving mindset that makes you better at everything tech-related.<br/><br/>---<br/><br/><h3 class='text-3'> 2. *Code Complete* by Steve McConnell</h3><br/>Another big name in the programming world, *Code Complete* dives into the nitty-gritty of building robust, maintainable software. It covers naming conventions, debugging, testing, and so much more.  <br/><strong>Key Takeaway</strong>: It's like a “best practices” bible, encouraging you to write code that's readable, efficient, and built to last.<br/><br/>---<br/><br/><h3 class='text-3'> 3. *Educated* by Tara Westover</h3><br/>This isn't a coding book, but it's a powerful memoir about growing up in a challenging environment and finding your own path to learning.  <br/><strong>Inspiration Factor</strong>: It reminds me that *anyone* can overcome obstacles and grow, regardless of where they start. For me, that mindset is crucial when I'm feeling behind or overwhelmed by new tech.<br/><br/>---<br/><br/>> <strong>Information: Did you know?</strong>  <br/>> Reading about topics *outside* of coding can boost creativity and help you see problems from different angles. Biographies, memoirs, and even works of fiction can all contribute to your growth as a developer.<br/><br/><h3 class='text-3'> 4. *The Hobbit* by J.R.R. Tolkien</h3><br/>Okay, so this one might seem out of left field. But I've been a fantasy lover for ages, and *The Hobbit*—with its sense of adventure and discovery—reminds me that learning new skills is its own kind of epic quest.  <br/><strong>Personal Note</strong>: Sometimes, diving into a fictional world helps reset my brain so I can return to coding challenges with fresh energy.<br/><br/>---<br/><br/><h3 class='text-3'> 5. *Don't Make Me Think* by Steve Krug</h3><br/>Focusing on user experience (UX) might seem like a “later step” in the coding journey, but this classic book shows how a user-friendly design approach can transform your projects from day one.  <br/><strong>Main Lesson</strong>: Your app or website should be intuitive enough that users don't have to *think* about how to navigate it. Less friction equals more enjoyment!<br/><br/>---<br/><br/><h3 class='text-3'> My Advice for Fellow Readers</h3><br/>- <strong>Mix It Up</strong>: Read both technical and non-technical books.<br/>- <strong>Reflect</strong>: After finishing a book, jot down your biggest takeaways.<br/>- <strong>Apply What You Learn</strong>: If it's a coding concept, try it in a small project. If it's a life lesson, see how it shapes your mindset when tackling problems.<br/><br/>Reading has been an amazing way for me to step back, recharge, and approach my work with fresh eyes. If you're looking for inspiration on your own coding journey, give these books a shot—or go hunting for new titles that speak to you.<br/><br/>— Paulina"
    },
    {
        "id": 3,
        "title": "Overcoming Imposter Syndrome as a New Developer",
        "slug": "overcoming-imposter-syndrome",
        "publishedAt": "2025-02-10T00:00:00Z",
        "description": "Tips and personal reflections on dealing with self-doubt when learning to code.",
        "content": "Today, I want to open up about a topic that hits close to home for many of us in tech—<strong>imposter syndrome</strong>. If you've ever felt like you don't belong or you're not “good enough” as a developer, you're definitely not alone. Let's dive into what imposter syndrome is, why it happens, and how we can manage it.<br/><br/>---<br/><br/><h3 class='text-3'> What Is Imposter Syndrome?</h3><br/><br/>Imposter syndrome is that nagging feeling that you're somehow *faking it* and that everyone else knows more than you. In a fast-moving field like software development, it's easy to compare yourself to others and think you come up short.<br/><br/>> “I have written eleven books, but each time I think, 'Uh oh, they're going to find out now.”  <br/>> — Maya Angelou<br/><br/>If even Maya Angelou felt like an imposter, it's safe to say we're in good company!<br/><br/>---<br/><br/><h3 class='text-3'> Why It Happens in Tech</h3><br/>1. <strong>Constant Innovation</strong>: With new frameworks, libraries, and languages popping up, nobody can keep up with *everything*.<br/>2. <strong>High Expectations</strong>: The tech world moves quickly, and sometimes it seems like everyone else is on a rocket ship to expertise.<br/>3. <strong>Comparisons</strong>: Scrolling through social media and seeing polished projects can make you forget we all struggle behind the scenes.<br/><br/>---<br/><br/><h3 class='text-3'> Strategies to Cope</h3><br/><br/>- <strong>Keep a “Wins” Journal</strong>: Write down things you accomplish—no matter how small. Fixed that tricky bug? Jot it down! Launched your first site? Note it!<br/>- <strong>Seek Feedback</strong>: Sometimes, getting an outside perspective can help you see your real strengths. If a friend or mentor says you're doing well, believe them!<br/>- <strong>Break Down Goals</strong>: Tackling smaller chunks of a problem can boost your confidence. Each tiny win builds momentum.<br/>- <strong>Remember Your Progress</strong>: It's easy to forget how far you've come. Take a moment to look back at older projects or code you wrote months ago. Chances are, you'll spot major improvements.<br/><br/>---<br/><br/><h3 class='text-3'> My Personal Experience</h3><br/>I still feel like an imposter from time to time—especially when I'm jumping into a new technology or seeing someone else's polished portfolio. But I've realized taking breaks helps me reset. Going for a quick hike or reading a chapter of a good book lets me come back with fresh eyes and a clearer mind.<br/><br/>---<br/><br/><h3 class='text-3'> Final Thoughts</h3><br/>At the end of the day, remember that <strong>everyone starts somewhere</strong>, and no one is an expert in everything. Embrace the learning process and celebrate every step forward, no matter how small. If you're feeling that “imposter” itch, just know that you are not alone. Keep coding, keep sharing, and keep reminding yourself that you belong here.<br/><br/>Thanks for reading, and I'll catch you in the next post!<br/><br/>— Paulina"
    },
    {
        "id": 4,
        "title": "Exploring the World of Responsive Design",
        "slug": "exploring-responsive-design",
        "publishedAt": "2025-02-04T00:00:00Z",
        "description": "The importance of making websites look great on different devices.",
        "content": "If you've been around my blog before, you know how *excited* I get about front-end challenges. Lately, I've been diving into <strong>responsive design</strong>, which is all about making websites look great on screens of all shapes and sizes. In this post, I'll share some of my thoughts, tips, and a tiny bit of code so you can see how it all comes together.<br/><br/>---<br/><br/><h3 class='text-3'> Why Responsive Design Matters</h3><br/><br/>1. <strong>Better User Experience</strong>  <br/>   Whether someone's browsing on a phone, tablet, or massive desktop monitor, you want your website to feel *just right*. Nobody enjoys pinching and zooming to read tiny text.<br/><br/>2. <strong>Higher Engagement</strong>  <br/>   Sites that adapt to different devices are more likely to keep visitors around longer. We've all hit those pages on our phones that felt clunky, right?<br/><br/>3. <strong>Future-Friendly</strong>  <br/>   New devices (and screen sizes) pop up all the time. A well-structured, responsive site stands the test of time—so you're *ready* for whatever comes next.<br/><br/>---<br/><br/><h3 class='text-3'> Key Concepts</h3><br/><br/>> “Design is not just what it looks like and feels like. Design is how it works.”  <br/>> — Steve Jobs<br/><br/>- <strong>Fluid Layouts</strong>: Instead of fixed widths, use percentages or `max-width` for images and containers. This helps elements adapt smoothly when screens shrink or expand.<br/>- <strong>Media Queries</strong>: These allow you to apply specific CSS rules based on screen size (or orientation). For example, you might change the layout from a single column on mobile to two columns on a tablet.<br/>- <strong>Mobile-First Approach</strong>: Start styling for the smallest screens, then add layers of complexity as devices get bigger. It can feel odd at first, but it often simplifies your CSS and improves performance.<br/><br/>---<br/><br/><h3 class='text-3'> A Tiny Example</h3><br/><br/>Below is a quick code snippet illustrating how you might use <strong>media queries</strong> to tweak your layout between mobile and larger screens:<br/><br/>```css<br/>/* Mobile styles (default) */<br/>.container {<br/>  display: block;<br/>  margin: 1rem;<br/>}<br/><br/>/* For screens wider than 768px */<br/>@media (min-width: 768px) {<br/>  .container {<br/>    display: flex;<br/>    justify-content: space-between;<br/>  }<br/>}<br/>```<br/><br/>1. <strong>Default (Mobile)</strong>: I give `.container` a block layout so the elements stack vertically.<br/>2. <strong>Media Query</strong>: Once the screen is at least 768px wide, `.container` becomes `flex`, making items line up side by side.<br/><br/>---<br/><br/><h3 class='text-3'> My Experience So Far</h3><br/>I won't lie—wrangling responsive layouts can be a bit of a dance. One minute you think everything looks perfect, and the next minute you're checking your phone to see everything out of place! But each challenge teaches you something new, whether it's about margin spacing, font sizing, or making images scale smoothly.<br/><br/>---<br/><br/><h3 class='text-3'> Tips to Keep in Mind</h3><br/><br/>- <strong>Start Small</strong>: Focus on mobile first. Get that looking solid before dealing with bigger screens.<br/>- <strong>Test on Real Devices</strong>: Browser dev tools are awesome, but always double-check on an actual phone or tablet.<br/>- <strong>Stay Organized</strong>: Comment your media queries and keep them in a logical order (like from smallest to largest).<br/>- <strong>Break Down Complex Layouts</strong>: If a section is too tricky, try dividing it into smaller parts you can manage step by step.<br/><br/>---<br/><br/>Thanks for stopping by! If you're exploring responsive design too, drop me a line—I'd love to hear about your approach or favorite tricks. <br/><br/>Until next time, happy coding!  <br/>—Paulina"
    },
    {
        "id": 5,
        "title": "My Favorite Dev Tools for Productivity",
        "slug": "dev-tools-for-productivity",
        "publishedAt": "2025-01-29T00:00:00Z",
        "description": "A quick look at the tools I rely on, from code editors to browser extensions.",
        "content": "Hey there! It's Paulina, back again to share a bit about the tools that make my life easier (and my code better) as a budding front-end web developer. While there's no *one-size-fits-all* solution, these tools have helped me stay organized, write cleaner code, and speed up my workflow. Let's dive in!<br/><br/>---<br/><br/><h3 class='text-3'> Why the Right Tools Matter</h3><br/>When I first started coding, I had no idea how many options were out there. But over time, I've come to realize:<br/><br/>> “The right tools can turn a frustrating coding session into a fun and productive one.”<br/><br/>Below are a few of my favorites that keep me on track and motivated.<br/><br/>---<br/><br/><h3 class='text-3'> 1. Visual Studio Code (VS Code)</h3><br/>I used to jump between different code editors, but <strong>VS Code</strong> quickly became my home base. Here's why:<br/><br/>- <strong>Intuitive Interface</strong>: Easy to navigate, with a neat file explorer.<br/>- <strong>Extensions</strong>: From syntax highlighting to auto-formatting, there's an extension for everything.<br/>- <strong>Built-In Terminal</strong>: No more switching back and forth between separate windows.<br/><br/>VS Code's marketplace is a treasure trove of productivity boosters—just make sure you don't go overboard installing *all* the shiny new extensions!<br/><br/>---<br/><br/><h3 class='text-3'> 2. Chrome DevTools</h3><br/>When it comes to debugging front-end issues, <strong>Chrome DevTools</strong> is my best friend. It lets you:<br/><br/>1. Inspect and tweak your HTML and CSS in real time.<br/>2. Debug JavaScript and set breakpoints to see what's happening under the hood.<br/>3. Test responsive designs across various screen sizes.<br/><br/>I'm just starting to explore its *performance* and *network* tabs, but already, it's helped me understand why my site sometimes runs slowly or loads resources in weird ways.<br/><br/>---<br/><br/><h3 class='text-3'> 3. Git & GitHub</h3><br/>At first, <strong>Git</strong> felt intimidating—typing commands into a terminal? Yikes! But now I can't imagine coding without version control. Some benefits:<br/><br/>- <strong>Easy Rollbacks</strong>: Messed something up? Just revert to a previous commit.<br/>- <strong>Collaboration</strong>: Even if you're coding solo, it's great practice to store your projects on <strong>GitHub</strong> for future reference—or to share with friends.<br/><br/>Setting up a simple `.gitignore` file has saved me a million times from pushing unwanted files to my repositories.<br/><br/>---<br/><br/><h3 class='text-3'> 4. Prettier & ESLint</h3><br/>These two <strong>VS Code</strong> extensions have become non-negotiable:<br/><br/>- <strong>Prettier</strong> automatically formats your code, so you don't spend hours aligning brackets or spaces.<br/>- <strong>ESLint</strong> helps spot and fix potential errors or bad practices in your JavaScript.<br/><br/>If you've ever stared at your code and wondered why something is off by two spaces, these tools will be your new besties.<br/><br/>---<br/><br/><h3 class='text-3'> 5. Notion</h3><br/>Yes, it's not strictly a coding tool, but <strong>Notion</strong> keeps my life organized. I use it for:<br/><br/>- <strong>Task lists</strong>: Breaking down coding projects into smaller, manageable steps.<br/>- <strong>Note-taking</strong>: Tracking new tricks I learn, or copying snippets of code I might reuse later.<br/>- <strong>Kanban boards</strong>: Visualizing project tasks in a simple drag-and-drop layout.<br/><br/>Since I juggle coding, reading, hiking, and rock climbing, Notion is where I store all those random brain dumps so I don't forget them.<br/><br/>> <strong>Tip: Master One Tool at a Time</strong> <br/>> Don't feel like you need to adopt every tool at once. If you're new to Git, focus on learning the basics first. If you're new to Chrome DevTools, explore one tab at a time. It's easy to feel overwhelmed, so remember to take it step by step.<br/><br/>Thanks for reading! I hope this gives you some ideas on how to streamline your own workflow. If you've got a favorite dev tool that *absolutely* rocks your productivity, let me know—I'm always on the lookout for new ways to make coding a little easier. <br/><br/>Until next time,  <br/><strong>Paulina</strong>"
    },
    {
        "id": 6,
        "title": "Understanding JavaScript Basics",
        "slug": "understanding-javascript-basics",
        "publishedAt": "2025-01-28T00:00:00Z",
        "description": "My adventure into JavaScript's fundamentals—variables, functions, loops, and more.",
        "content": "While HTML and CSS handle structure and style, JavaScript is what adds interactivity and depth. I'm still learning the ropes, but I've already uncovered some nifty basics that made me fall in love with the language.<br/><br/>---<br/><br/>> “The only way to learn a new programming language is by writing programs in it.”  <br/>> – Dennis Ritchie<br/><br/>This quote rings true for me. Nothing beats rolling up your sleeves and coding, even when you have no idea what you're doing at first. Below, I'll share some foundational concepts and a bit of code that helped me get started.<br/><br/>---<br/><br/><h3 class='text-3'> Diving into the Essentials</h3><br/>1. <strong>Variables</strong>: These are like containers for storing data. You can declare a variable using `let`, `const`, or `var`.<br/>2. <strong>Data Types</strong>: Common ones include <strong>strings</strong>, <strong>numbers</strong>, <strong>booleans</strong>, <strong>null</strong>, and <strong>undefined</strong>.<br/>3. <strong>Functions</strong>: Think of these as reusable code blocks that perform specific tasks.<br/>4. <strong>Conditionals</strong>: `if`, `else`, and `switch` let you handle different scenarios based on conditions.<br/>5. <strong>Loops</strong>: `for`, `while`, and `forEach` are your best friends for repeating actions.<br/><br/>Even though these building blocks may seem straightforward, mastering them is key to writing code that's clean and efficient.<br/><br/>---<br/><br/><h3 class='text-3'> A Quick Code Example</h3><br/>Here's a tiny snippet that shows how you might use JavaScript to greet users and add two numbers:<br/><br/>```js<br/>// 1. Ask for the user's name<br/>const userName = prompt(\"What's your name?\");<br/><br/>// 2. Greet the user<br/>console.log(`Hello, ${userName}! Welcome to my blog.`);<br/><br/>// 3. A simple function that adds two numbers<br/>function addNumbers(a, b) {<br/>  return a + b;<br/>}<br/><br/>// 4. Let's give it a try<br/>const result = addNumbers(5, 7);<br/>console.log(`The sum of 5 and 7 is: ${result}`);<br/>```<br/><br/>- <strong>Line 1</strong> uses `prompt()` to get input from the user.<br/>- <strong>Line 2</strong> uses template literals (the backticks) to insert `userName` into the string.<br/>- <strong>Lines 3–7</strong> define a function to add two numbers, then return the result.<br/>- <strong>Line 10</strong> calls `addNumbers()` and logs the result to the console.<br/><br/>I love these little examples because they showcase just how straightforward JavaScript can be. Of course, there's *so* much more to learn, but this is a neat place to start.<br/><br/>---<br/><br/><h3 class='text-3'> My Biggest Takeaway</h3><br/>JavaScript initially felt intimidating, but after a few days of experimenting, I realized that it's basically a set of rules and tools that help you tell your browser what to do. As someone who likes to *see things happen* in real-time, JavaScript is an absolute delight. Just remember to:<br/><br/>- <strong>Experiment often</strong> and break things—mistakes will teach you a lot.<br/>- <strong>Use browser DevTools</strong> to debug your code.<br/>- <strong>Check documentation</strong> like MDN (Mozilla Developer Network) whenever you're stuck.<br/><br/>Most importantly, keep it fun! I'm excited to continue exploring more complex concepts—like arrays, objects, and eventually frameworks like React. Thanks for reading, and happy coding!"
    },
    {
        "id": 7,
        "title": "Learning HTML & CSS: My First Week",
        "slug": "learning-html-css",
        "publishedAt": "2025-01-16T00:00:00Z",
        "description": "A recap of my first steps in web development, from basic tags to styling techniques.",
        "content": "This past week, I dove headfirst into HTML and CSS—and I've got to say, I'm both excited and a little overwhelmed. Below, I'll share some highlights, a few struggles, and a handy table showing how I tackled each day.<br/><br/>---<br/><br/><h3 class='text-3'> Getting Started</h3><br/>I kicked things off by creating a super basic webpage. At first, my page was basically just a white screen with a heading and a sentence. Exciting, right? But the moment I *linked my first CSS file* and changed the background color... I felt like I unlocked a whole new universe.<br/><br/>> <strong>Tip: If you're as new as I am, start small</strong>.  <br/>> Even making a simple page look cool with basic styling can spark major motivation.<br/><br/>---<br/><br/><h3 class='text-3'> What Surprised Me</h3><br/>- <strong>HTML isn't “hard,”</strong> but it's easy to get lost in the tags. You'll want to keep your structure organized from the start.  <br/>- <strong>CSS is powerful</strong>, but learning about the box model made my head spin at first. Turns out, margins, borders, and padding can actually be fun once you get the hang of it.  <br/>- <strong>Positioning elements</strong> is a bit like solving a puzzle. If your layout isn't cooperating, try stepping away for a bit and coming back with fresh eyes (or a coffee break).<br/><br/>---<br/><br/><h3 class='text-3'> A Little Table of My Progress</h3><br/>Below is a quick rundown of what I focused on each day of my first week. It's not *super* detailed, but it'll give you a sense of how I paced things out.<br/><br/>| Day       | HTML Topic                                 | CSS Topic                  | Notes                                                      |<br/>|-----------|--------------------------------------------|----------------------------|------------------------------------------------------------|<br/>| Monday    | Basic tags: `<html>`, `<head>`, `<body>`     | Inline styles              | Felt odd mixing styles with HTML, but it was good practice. |<br/>| Tuesday   | Headings & paragraphs                      | External CSS w/ `<link>`   | Loved keeping my CSS separate. Much cleaner.              |<br/>| Wednesday | Links & images                             | Fonts & typography         | Played with Google Fonts—so many options!                 |<br/>| Thursday  | Lists & tables                             | The box model              | Understanding padding vs. margin was a game changer.       |<br/>| Friday    | Divs & sections                            | Basic layout (float)       | Floats can be tricky—definitely some trial and error here. |<br/>| Saturday  | Forms (text inputs, buttons)               | Flexbox basics             | Flexbox is *so* much easier to use than floats.            |<br/>| Sunday    | Revision & mini-project                    | More practice on Flexbox   | Built a small demo page to test everything I learned.      |<br/><br/>---<br/><br/><h3 class='text-3'> One Thing I'm Proud Of</h3><br/>I managed to build a tiny website for my personal notes. It only has a home page and a second page listing my to-do items, but it's fully styled! A small win, but it felt huge to me. Using `<div>`s and basic Flexbox properties, I was able to line up everything nicely.<br/><br/>Here's a snippet of code (it's simple, but it got me excited):<br/><br/>```html<br/><!DOCTYPE html><br/><html lang=\"en\"><br/><head><br/>  <meta charset=\"UTF-8\"><br/>  <title>My Mini Site</title><br/>  <link rel=\"stylesheet\" href=\"styles.css\"><br/></head><br/><body><br/>  <header><br/>    <h1>Paulina's Notes</h1><br/>  </header><br/>  <main><br/>    <section class=\"notes\"><br/>      <h2>Today's Tasks</h2><br/>      <ul><br/>        <li>Finish reading CSS documentation</li><br/>        <li>Practice Flexbox</li><br/>        <li>Go hiking in the afternoon</li><br/>      </ul><br/>    </section><br/>  </main><br/></body><br/></html><br/>```<br/><br/>And guess what? It actually looked decent once I threw in some CSS for spacing and colors!<br/><br/><h3 class='text-3'>What's Next?</h3><br/>In the coming days, I'm planning to dive deeper into responsive design. Making websites that look good on a phone, tablet, and desktop at the same time sounds like a challenge, but I'm ready for it.<br/><br/>If you're learning HTML & CSS too, keep experimenting! I discovered that the best way to learn is by building tiny projects—even if they're just for fun. You'll be amazed at how quickly you improve when you're actively creating something.<br/><br/>Alright, that's all for now. Thanks for reading, and I'll be back soon with more updates!"
    },
    {
        "id": 8,
        "title": "Why I Chose Front-End Web Development",
        "slug": "why-i-chose-front-end-web-development",
        "publishedAt": "2025-01-12T00:00:00Z",
        "description": "The reasons behind my shift to front-end and why this path excites me.",
        "content": "Hi there! I'm <strong>Paulina</strong>, and this is my very first blog post documenting my journey into front-end web development. People often ask me why I chose this path, and I'm happy to share my thoughts and experiences here. I hope you find something helpful or inspiring in my story!<br/><br/>---<br/><br/><h3 class='text-3'> A Love for Creativity</h3><br/>From a young age, I've enjoyed drawing, designing, and tinkering with visuals. Front-end web development feels like a digital extension of that creativity. It's all about:<br/><br/>- <strong>Designing layouts</strong> that are pleasing to the eye  <br/>- <strong>Choosing colors and fonts</strong> that match the project's vibe  <br/>- <strong>Adding animations</strong> or fun features to keep users engaged<br/><br/>Whenever I see my code come to life in the browser, it sparks a little “wow” moment. That immediate feedback is one of the biggest reasons I fell in love with front-end development.<br/><br/>---<br/><br/><h3 class='text-3'> The Thrill of Problem-Solving</h3><br/>Though creativity is a big part of front-end work, solving technical problems is just as important—and just as exciting. Sometimes, my code just refuses to behave, and I'll spend hours trying different approaches. The satisfaction of finally cracking the puzzle is <strong>unmatched</strong>.<br/><br/>- <strong>Debugging</strong> complex layouts can be frustrating, but also very rewarding.  <br/>- <strong>Experimenting</strong> with new features teaches me something new each time.  <br/>- <strong>Learning</strong> from mistakes helps me grow faster than I ever expected.<br/><br/>To break up these coding challenges, I often step away from my desk to go <strong>rock climbing</strong> or <strong>hiking</strong>. Getting my body moving in the real world helps clear my mind so I can come back to a coding problem with fresh eyes.<br/><br/>---<br/><br/><h3 class='text-3'> Connecting with the Community</h3><br/>Another huge draw of front-end development is the <strong>supportive online community</strong>. There are countless tutorials, forums, and friendly people who love to help beginners. Some of my favorite resources include:<br/><br/>- Online forums like <strong>freeCodeCamp</strong>  <br/>- Video tutorials on <strong>YouTube</strong>  <br/>- Interactive challenges on <strong>Frontend Mentor</strong>  <br/><br/>I've found that when I get stuck or need guidance, there's always someone who's been in my shoes and is willing to lend a hand. It's comforting to know I'm never truly alone in this journey.<br/><br/>---<br/><br/><h3 class='text-3'> Looking Ahead</h3><br/>As I continue learning, I plan to:<br/><br/>1. <strong>Build small projects</strong> to practice my skills in real-world scenarios  <br/>2. <strong>Share coding tips</strong> and tutorials on this blog to help fellow beginners  <br/>3. <strong>Challenge myself</strong> with advanced JavaScript and frameworks like React<br/><br/>I'm excited about what lies ahead and can't wait to see how my skills grow. If you're also on a coding journey, or even thinking about starting one, feel free to follow along. I'll be posting more articles about what I learn, mistakes I make, and small victories along the way.<br/><br/>---<br/><br/><h3 class='text-3'> Thank You for Stopping By</h3><br/>I'm thrilled you're here, and I appreciate you taking the time to read this post.<br/><br/>Until next time,<br/><strong>Paulina</strong>"
    }
]
